#!/usr/local/bin/python

# jailguard by Nicholas Gasior <nicholas@laatu.uk>
# http://github.com/xnicholas/jailguard
#
# Quick script to create, remove and list jails.
#
# Arguments to deal with:
# * parts to be installed: base, src, ports, lib32, kernel, doc, tests;
# * version;
# * jail IP address;
# * jail name;
# * jail hostname;
# * allow raw sockets.

from subprocess import Popen, PIPE, run, check_call, CalledProcessError
import argparse, binascii, re, os, sys, urllib.request, shutil, fileinput
from sys import stdout

VERSION=0.1

# @todo Base to be added as an optional argument later.
path_jails='/usr/local/jails'
zroot_jails='zroot/jails'
format_list="{: <15} {: <15} {: <30} {: <19}"
url_freebsd='ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64'

def validate_hostname(string):
    # @todo Better validation needed here.
    if not re.match(r'^[a-z0-9][a-zA-Z0-9\.\-]+[a-z0-9]$', string):
        raise argparse.ArgumentTypeError('')
    return string

def validate_ip_address(string):
    if not re.match(r'^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$', string):
        raise argparse.ArgumentTypeError('')
    for x in string.split('.'):
        if int(x)>255:
            raise argparse.ArgumentTypeError('')
    return string

def validate_interface(string):
    if not re.match(r'^[a-z0-9\-_]+$', string):
        raise argparse.ArgumentTypeError('')
    return string

def validate_name(string):
    if not re.match(r'^[a-z0-9\-_]+$', string):
        raise argparse.ArgumentTypeError('')
    return string

def create_parser():
    # Create args parser.
    parser = argparse.ArgumentParser(
        description="Simple jail management tool", 
        epilog="Visit http://github.com/xnicholas/lockup for more information.")
    
    subparsers = parser.add_subparsers(help='action to be taken')
    
    # 'create' sub-command.
    parser_create = subparsers.add_parser('create', help='creates jail')
    parser_create.add_argument('hostname', type=validate_hostname)
    parser_create.add_argument('interface', type=validate_interface)
    parser_create.add_argument('ip_address', type=validate_ip_address)
    parser_create.add_argument('name', type=validate_name)
    parser_create.add_argument('release', choices=['11.0-RELEASE'])
    parser_create.add_argument('--allow-raw-sockets', action='store_const', const=1, help='allow raw sockets')
    parser_create.add_argument('--assign-ip-address', action='store_const', const=1, help='assign ip address to interface if unavailable')
    parser_create.add_argument('--create-interface', action='store_const', const=1, help='create interface if unavailable')
    for part in ['ports', 'src', 'lib32', 'kernel', 'doc', 'tests']:
        parser_create.add_argument('--'+part, action='store_const', const=1, help='add '+part)
    parser_create.set_defaults(cmd='create')
    
    # 'remove' sub-command.
    parser_remove = subparsers.add_parser('remove', help='removes jail')
    parser_remove.add_argument('name', type=validate_name)
    parser_remove.add_argument('--comment-out-config', action='store_const', const=1, help='comments out config instead of removing')
    parser_remove.add_argument('--remove-files', action='store_const', const=1, help='removes jail directory')
    parser_remove.add_argument('--stop', action='store_const', const=1, help='stops jail if running')
    parser_remove.add_argument('--unassign-ip-address', action='store_const', const=1, help='unassign ip address from interface')
    parser_remove.set_defaults(cmd='remove')
    
    # 'list' sub-command.
    parser_list = subparsers.add_parser('list', help='lists all jails')
    parser_list.add_argument('--show', choices=['all', 'stopped', 'running'], default='all')
    parser_list.set_defaults(cmd='list')

    # 'start' sub-command.
    parser_start = subparsers.add_parser('start', help='starts jail')
    parser_start.add_argument('name', type=validate_name)
    parser_start.set_defaults(cmd='start')

    # 'stop' sub-command.
    parser_stop = subparsers.add_parser('stop', help='stops jail')
    parser_stop.add_argument('name', type=validate_name)
    parser_stop.set_defaults(cmd='stop')

    # 'restart' sub-command.
    parser_restart = subparsers.add_parser('restart', help='restarts jail')
    parser_restart.add_argument('name', type=validate_name)
    parser_restart.set_defaults(cmd='restart')
    
    return parser

def parse_args(parser):
    # Parsing the arguments.
    args = vars(parser.parse_args())

    # Main sub-command switch.
    if 'cmd' in args:
        if args['cmd'] == 'create':
            cmd_create(args)
        elif args['cmd'] == 'remove':
            cmd_remove(args)
        elif args['cmd'] == 'list':
            cmd_list(args)
        elif args['cmd'] == 'stop':
            cmd_stop(args)
        elif args['cmd'] == 'start':
            cmd_start(args)
        elif args['cmd'] == 'restart':
            cmd_restart(args)

def get_jail_config(name):
    if not os.path.isfile('/etc/jail.conf'):
        return None
    with open('/etc/jail.conf') as file:
        details = {}
        found = False
        for line in file:
            line = re.sub(r'(^[\s]+)|([\s]+$)', '', line)
            if not found:
                name_match =re.match(r'^(\w+)[\s]+{', line)
                if name_match is not None:
                    jail_name = name_match.group(1)
                    if jail_name == name:
                        found = True
            else:
                if re.match(r'^}', line):
                    break;
                break_after_this = False
                if re.match(r'}$', line):
                    break_after_this = True
                    line = re.sub(r'[\s]*}$', '', line)
                line = re.sub(r'["]*;$', '', line)
                line = re.sub(r'[\s]*=[\s]*["]{0,1}', '=', line)
                (key, val) = line.split('=')
                details[key] = val
                if break_after_this:
                    break
        if found:
            return details
    return None

def remove_jail_config(name, comment_out):
    if comment_out is not None and comment_out == 1:
        with open('/etc/jail.conf','r') as file:
            found = False
            contents = ''
            for line in file:
                tmp_line = re.sub(r'(^[\s]+)|([\s]+$)', '', line)
                if not found:
                    name_match =re.match(r'^(\w+)[\s]+{', tmp_line)
                    if name_match is not None:
                        jail_name = name_match.group(1)
                        if jail_name == name:
                            found = True
                            contents += '#'+line
                        else:
                            contents += line
                    else:
                        contents += line
                else:
                    contents += '#'+line
                    if re.match(r'}$', line):
                        found = False
        if contents is not None:
            file = open('/etc/jail.conf', 'w')
            file.write(contents)
            file.close()

    else:
        file = open('/etc/jail.conf', 'r')
        contents = file.read()
        file.close()

        # Assuming that '}nextjailname' never occurs.
        contents = (re.sub(r'[^a-zA-Z0-9_]'+name+'[\s]+{[^}]*}', '', contents))
        file = open('/etc/jail.conf', 'w')
        file.write(contents)
        file.close()

def check_path_jails_exists(path_jails):
    if not os.path.isdir(path_jails):
        sys.stderr.write("\n*** Path "+path_jails+" needs to be a directory. ***\n\n" \
        + "If you use zfs you can create a pool by running the following command:\n" \
        + "zfs create -o mountpoint="+path_jails+" "+zroot_jails+"\n\n")
        sys.exit(1)

def check_jail_dir_doesnt_exist(path_jail):
    if os.path.exists(path_jail):
        sys.stderr.write("\n*** Path "+path_jail+" already exists. Check if jail is not already created. ***\n\n")
        sys.exit(1)

def create_interface(interface):
    run(['ifconfig', interface, 'create'], stdout=PIPE, stderr=PIPE)

def check_interface(interface, create):
    try:
        check_call(['ifconfig', interface], stdout=PIPE, stderr=PIPE)
    except CalledProcessError:
        if create is not None and create == 1:
            create_interface(interface)
        else:
            sys.stderr.write("\n*** Interface "+interface+" does not exist. ***\n\n")
            sys.exit(1)

def assign_ip_to_interface(interface, ip):
    run(['ifconfig', interface, 'alias', ip], stdout=PIPE, stderr=PIPE)

def unassign_ip_from_interface(interface, ip):
    run(['ifconfig', interface, '-alias', ip], stdout=PIPE, stderr=PIPE)

def check_interface_and_ip_address(interface, ip, assign):
    p = Popen(['ifconfig', interface], stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()
    out = out.decode('utf-8')
    if 'inet '+ip not in re.findall(r'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}', out):
        if assign is not None and assign == 1:
            assign_ip_to_interface(interface, ip)
        else:
            sys.stderr.write("\n*** IP address "+ip+" cannot be found on any interface. ***\n\n" \
            + "Please clone the loopback interface and attach range of IP addresses for jails.\n\n" \
            + "For example, you can put the following to your /etc/rc.conf:\n" \
            + "cloned_interfaces=\"lo1\"\n" \
            + "ifconfig_lo1=\"10.0.0.11-50/32\"\n" \
            + "and restart your networking.\n\n" \
            + "If you do not want to restart, you can add interface manually:\n" \
            + "ifconfig lo create\n" \
            + "ifconfig lo1 inet 10.0.0.11\n\n" \
            + "If you just need to add IP address to existing interface run:\n" \
            + "ifconfig lo1 alias 10.0.0.12\n\n")
            sys.exit(1)

def alter_rc_conf(action='add', cloned_interface=None, ip_alias=None):
    return False

def alter_jail_conf(name, hostname, path, interface, ip_address, allow_raw_sockets):
    # Add base configuration to jail.conf; only if the file does not exist.
    # If file exists then we'll assume that the base configuration is already there.
    if not os.path.isfile('/etc/jail.conf'):
        with open('/etc/jail.conf', 'w') as file:
            file.writelines("exec.start=\"/bin/sh /etc/rc\";\n"
            + "exec.stop=\"/bin/sh /etc/rc.shutdown\";\n"
            + "exec.clean;\n"
            + "mount.devfs;\n\n")

    # Add jail definition to jail.conf.
    with open('/etc/jail.conf', 'a') as file:
        file.writelines(name+" {\n"
        + "    host.hostname =\""+hostname+"\";\n"
        + "    path = \""+path+"\";\n"
        + "    interface = \""+interface+"\";\n"
        + "    ip4.addr = \""+ip_address+"\";\n"
        + ("    allow.raw_sockets = 1;\n" if allow_raw_sockets is not None and allow_raw_sockets == 1 else "")
        + "}\n")

def check_jail_running(name):
    # Use 'jls' command to get the currently running jails.
    p = Popen(['jls', '-N'], stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()
    i = 0
    for line in out.decode('utf-8').split('\n'):
        if i>0:
            line = re.sub('^[\s]+', '', line)
            name_match = re.match(r'^(\w+)', line)
            if name_match is not None and name_match.group(1) == name:
                return True
        i+=1
    return False

def stop_jail(name):
    run(['jail', '-r', name], stdout=PIPE, stderr=PIPE)

def start_jail(name):
    run(['jail', '-c', name], stdout=PIPE, stderr=PIPE)

def restart_jail(name):
    stop_jail(name)
    start_jail(name)

def print_jails_running():
    p = Popen(['jls', '-N'], stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()
    print(format_list.format('Name', 'IP', 'Hostname', 'Path'))
    i = 0
    for line in out.decode('utf-8').split("\n"):
        if i>0:
            line = re.sub('^[\s]+', '', line)
            line = re.sub('[\s]{2,}', ' ', line)
            if line == '':
                break
            line_arr = line.split(' ')
            jail_name = line_arr[0]
            jail_ip = line_arr[1]
            jail_hostname = line_arr[2]
            jail_path = re.sub(r'\/$', '', line_arr[3])
            print(format_list.format(jail_name, jail_ip, jail_hostname, jail_path))
        i += 1

def print_jails_all(exclude_array = None):
    print(format_list.format('Name', 'IP', 'Hostname', 'Path'))
    if not os.path.isfile('/etc/jail.conf'):
        return None
    with open('/etc/jail.conf') as file:
        jails = {}
        current_jail = ''
        for line in file:
            line = re.sub(r'(^[\s]+)|([\s]+$)', '', line)
            if current_jail == '':
                name_match =re.match(r'^(\w+)[\s]+{', line)
                if name_match is not None:
                    jail_name = name_match.group(1)
                    current_jail = jail_name
            else:
                if re.match(r'^}', line):
                    current_jail = ''
                    continue
                reset_current_jail_after_this = False
                if re.match(r'}$', line):
                    reset_current_jail_after_this = True
                    line = re.sub(r'[\s]*}$', '', line)
                line = re.sub(r'["]*;$', '', line)
                line = re.sub(r'[\s]*=[\s]*["]{0,1}', '=', line)
                (key, val) = line.split('=')
                if current_jail not in jails.keys():
                    jails[current_jail] = {}
                jails[current_jail][key] = val
                if reset_current_jail_after_this:
                    current_jail = ''
        jail_names = jails.keys()
        for n in jail_names:
            if exclude_array is None or n not in exclude_array:
                print(format_list.format(n, jails[n]['ip4.addr'], jails[n]['host.hostname'], jails[n]['path']))

def print_jails_stopped():
    p = Popen(['jls', '-N'], stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()

    # Getting running jails.
    jails_running = []
    i = 0
    for line in out.decode('utf-8').split("\n"):
        if i>0:
            line = re.sub('^[\s]+', '', line)
            line = re.sub('[\s]{2,}', ' ', line)
            if line == '':
                break
            line_arr = line.split(' ')
            jail_name = line_arr[0]
            jails_running.append(jail_name)
        i += 1

    print_jails_all(jails_running)

# @todo Add handling errors and exceptions.
def cmd_create(args):
    # Check if jail does not exist already.
    jail_config = get_jail_config(args['name'])
    if jail_config is not None:
        sys.stderr.write("\n*** Jail "+args['name']+" already exists in /etc/jail.conf.\n\n")
        sys.exit(1)

    # Check if jails directory exists.
    check_path_jails_exists(path_jails)

    # Check if jail directory does not exist.
    path_jail = path_jails+'/'+args['name']
    check_jail_dir_doesnt_exist(path_jail)

    # Check if interface exists.
    check_interface(args['interface'], args['create_interface'])

    # Check if IP address is assigned to the interface.
    check_interface_and_ip_address(args['interface'], args['ip_address'], args['assign_ip_address'])

    # Create jail directory.
    os.makedirs(path_jail, 0x755)

    # Download FreeBSD and insert into jail directory.
    urllib.request.urlretrieve(url_freebsd+'/'+args['release']+'/base.txz', path_jail+'/base.txz')
    run(['tar', '-xvf', path_jail+'/base.txz', '-C', path_jail+'/'], stdout=PIPE, stderr=PIPE)
    for part in ['src', 'ports', 'kernel', 'lib32', 'doc', 'tests']:
        if args[part] is not None:
            urllib.request.urlretrieve(url_freebsd+'/'+args['release']+'/'+part+'.txz', path_jail+'/'+part+'.txz')
            run(['tar', '-xvf', path_jail+'/'+part+'.txz', '-C', path_jail+'/'], stdout=PIPE, stderr=PIPE)

    # Copy resolv, localtime and add hostname to jail.
    shutil.copy('/etc/resolv.conf', path_jail+'/etc/resolv.conf')
    shutil.copy('/etc/localtime', path_jail+'/etc/localtime')
    with open(path_jail+'/etc/rc.conf', 'a') as file:
        file.writelines("hostname=\""+args['hostname']+"\"\n")

    # Add information to jail.conf.
    alter_jail_conf(args['name'], args['hostname'], path_jail, args['interface'], args['ip_address'], args['allow_raw_sockets'])

    # Print useful info on nat pass in pf.
    if args['allow_raw_sockets'] is not None and args['allow_raw_sockets'] == 1:
        sys.stdout.write("If you'd like to have internet inside your jail, add nat pass to your pf.\n" \
        + "See below example:\n"
        + "nat pass on YOUR_INTERNET_IFACE from "+args['ip_address']+" to any -> YOUR_GATEWAY\n\n")

    sys.stdout.write("Your jail "+args['name']+" should be now created.\n\n")

def cmd_remove(args):
    # Check if jail exists.
    jail_config = get_jail_config(args['name'])
    if jail_config is None:
        sys.stderr.write("\n*** Jail "+args['name']+" does not exist in /etc/jail.conf. ***\n\n")
        sys.exit(1)

    # Check if jail is not running. We can stop it only if --stop arg was passed.
    if check_jail_running(args['name']):
        if args['stop'] is not None and args['stop'] == 1:
            stop_jail(args['name'])
        else:
            sys.stderr.write("\n*** Jail is running. Please stop it or add --stop argument.\n\n")
            sys.exit(1)

    path_jail = path_jails+'/'+args['name']
    remove_jail_config(args['name'], args['comment_out_config'])

    # Unassign IP address if prompted.
    if args['unassign_ip_address'] is not None and args['unassign_ip_address'] == 1:
        unassign_ip_from_interface(jail_config['interface'], jail_config['ip4.addr'])

    if args['remove_files'] is not None and args['remove_files'] == 1:
        run(['chflags', '-R', 'noschg', path_jail], stdout=PIPE, stderr=PIPE)
        shutil.rmtree(path_jail)

    sys.stdout.write("Your jail "+args['name']+" should be now removed.\n\n")

def cmd_list(args):
    if args['show'] == 'running':
        print_jails_running()
    elif args['show'] == 'stopped':
        print_jails_stopped()
    elif args['show'] == 'all':
        print_jails_all()

def cmd_stop(args):
    # Check if jail is running.
    if not check_jail_running(args['name']):
        sys.stderr.write("\n*** Jail "+args['name']+" is not running. ***\n\n")
        sys.exit(1)

    stop_jail(args['name'])
    sys.stdout.write("Your jail "+args['name']+" should be now stopped.\n\n")

def cmd_start(args):
    # Check if jail exists.
    jail_config = get_jail_config(args['name'])
    if jail_config is None:
        sys.stderr.write("\n*** Jail "+args['name']+" does not exist in /etc/jail.conf. ***\n\n")
        sys.exit(1)

    # Check if jail is not running. We can stop it only if --stop arg was passed.
    if check_jail_running(args['name']):
        sys.stderr.write("\n*** Jail "+args['name']+" is already running.\n\n")
        sys.exit(1)

    start_jail(args['name'])

def cmd_restart(args):
    # Check if jail is running.
    if not check_jail_running(args['name']):
        sys.stderr.write("\n*** Jail "+args['name']+" is not running. ***\n\n")
        sys.exit(1)

    restart_jail(args['name'])
    sys.stdout.write("Your jail "+args['name']+" should be now restarted.\n\n")

def main():
    parser = create_parser()
    parse_args(parser)

if __name__ == "__main__":
    main()

