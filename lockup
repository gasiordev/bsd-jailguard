#!/usr/local/bin/python

# Lockup by Nicholas Gasior <nicholas@laatu.uk>
# http://github.com/xnicholas/lockup
#
# Quick script to create, remove and list jails.
#
# Arguments to deal with:
# * parts to be installed: base, src, ports, lib32, kernel, doc, tests;
# * version;
# * jail IP address;
# * jail name;
# * jail hostname;
# * internet inside;
# * service ssh;
# * service nginx.

from subprocess import Popen, PIPE
import argparse, binascii, re
from sys import stdout

# @todo Base to be added as an optional argument later.
path_jails='/usr/local/jails/'
format_list="{: <3} {: <20} {: <15} {: <30}"

def create_parser():
    # Creating args parser.
    parser = argparse.ArgumentParser(description="Simple jail management tool", epilog="Visit http://github.com/xnicholas/lockup for more information.")
    
    subparsers = parser.add_subparsers(help='action to be taken')
    
    # 'create' sub-command.
    parser_create = subparsers.add_parser('create', help='creates jail')
    for arg in ['hostname', 'ip_address', 'name']:
        parser_create.add_argument(arg)
    parser_create.add_argument('release', choices=['11.0-RELEASE'])
    parser_create.add_argument('--allow-raw-sockets', action='store_const', const=1, help='allow raw sockets')
    for part in ['ports', 'src', 'lib32', 'kernel', 'doc', 'tests']:
        parser_create.add_argument('--'+part, action='store_const', const=1, help='add '+part)
    for service in ['nginx', 'sshd']:
        parser_create.add_argument('--service-'+service, action='store_const', const=1, help='start '+service+' service')
    parser_create.set_defaults(cmd='create')
    
    # 'remove' sub-command.
    parser_remove = subparsers.add_parser('remove', help='removes jail')
    parser_remove.add_argument('name')
    parser_remove.set_defaults(cmd='remove')
    
    # 'list' sub-command.
    parser_list = subparsers.add_parser('list', help='lists all jails')
    parser_list.set_defaults(cmd='list')
    
    return parser

def parse_args(parser):
    # Parsing the arguments.
    args = vars(parser.parse_args())

    # Main sub-command switch.
    if 'cmd' in args:
        if args['cmd'] == 'create':
            create_jail(args)
    
        elif args['cmd'] == 'remove':
            remove_jail(args)
    
        elif args['cmd'] == 'list':
            list_jails()

def create_jail(args):
    print(args)

def remove_jail(args):
    print(args)

def list_jails():
    # Using 'jls' command to get the currently running jails.
    p = Popen(['jls'], stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()
    print(format_list.format("ID", "Name", "IP", "Hostname"))
    for line in out.decode('utf-8').split('\n'):
        line = re.sub('^[ ]+', '', line)
        line = re.sub('[ ]{2,}', ' ', line)
        if re.match('^[0-9]+', line):
            line_arr = line.split(' ')
            jail_id = line_arr[0]
            jail_ip = line_arr[1]
            jail_hostname = line_arr[2]
            # Assuming that path contains name of the jail.
            jail_path = re.sub(r'\/$', '', line_arr[3])
            jail_name = re.search(r'\/[a-zA-Z0-9\-_\.]+$', jail_path).group(0)
            jail_name = re.sub(r'^\/', '', jail_name)
            print(format_list.format(jail_id, jail_name, jail_ip, jail_hostname))

def main():
    parser = create_parser()
    parse_args(parser)

if __name__ == "__main__":
    main()

